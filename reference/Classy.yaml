openapi: 3.1.0
info:
  title: Classy
  version: '1.0'
  summary: Lumibib Classy REST API
  description: Lumibib Classy REST API
  contact:
    name: Lumibib
    email: support@lumibib.ch
servers:
  - url: 'https://demo.classy.lumibib.ch'
    description: Demo instance
  - url: 'https://ORG.classy.lumibib.ch'
    description: Your organisation
paths:
  '/classifications/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique ID
    get:
      summary: Get Classification Info by ID
      tags: []
      responses:
        '200':
          description: Classification Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Classification'
              examples:
                Get Classification A:
                  value:
                    type: classifications
                    id: K8lwg7bGxznj4e
                    attributes:
                      name: Classification A
                      description: null
                      status: active
                      catalog_uri: null
                      codes:
                        - - '100'
                          - Label A fr
                          - Note A fr
                          - Comment A
                      data: null
                      createdAt: '2021-07-11T11:31:02.000000Z'
                      updatedAt: '2021-07-11T11:31:02.000000Z'
                    links:
                      self: 'http://test.classy.test/api/v1/classifications/K8lwg7bGxznj4e'
        '404':
          description: User Not Found
      operationId: get-classifications-id
      description: Retrieve the information of the classification with the matching ID.
      parameters: []
  /classifications:
    get:
      summary: ''
      tags: []
      operationId: get-classifications
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Classification'
              examples:
                example-1:
                  value:
                    type: classifications
                    id: AAAAAAAAAAAAAA
                    attributes:
                      name: string
                      description: null
                      status: string
                      catalog_uri: null
                      codes:
                        - '0':
                            - {}
                      data: null
                      createdAt: string
                      updatedAt: string
                    links:
                      self: string
      description: Retrieve the information of all the organizations classifications.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
    parameters: []
components:
  schemas:
    Classification:
      description: ''
      type: object
      x-examples:
        example-1:
          type: classifications
          id: R8M4yx8BW0LlQZ
          attributes:
            name: Test
            description: null
            status: active
            catalog_uri: null
            codes:
              - - '100'
                - Label A fr
                - Note A fr
                - Comment A
            data: null
            createdAt: '2021-07-08T14:06:43.000000Z'
            updatedAt: '2021-07-08T14:25:24.000000Z'
          links:
            self: 'http://test.classy.test/api/v1/classifications/R8M4yx8BW0LlQZ'
      title: Classification
      properties:
        type:
          type: string
          enum:
            - classifications
        id:
          type: string
          example: AAAAAAAAAAAAAA
        attributes:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              minLength: 1
            description: {}
            status:
              type: string
              minLength: 1
            catalog_uri: {}
            codes:
              type: array
              items: {}
            data: {}
            createdAt:
              type: string
              minLength: 1
            updatedAt:
              type: string
              minLength: 1
        links:
          type: object
          properties:
            self:
              type: string
              minLength: 1
      required:
        - type
        - id
        - attributes
  securitySchemes: {}
  parameters:
    page:
      name: page
      in: query
      required: false
      schema:
        type: string
        example: 'page[number]=2&page[size]=15'
      description: Allow to return a subset of results. You have to use ´number and ´size parameters.
    filter:
      name: filter
      in: query
      required: false
      schema:
        type: string
        example: 'filter[name]=hello-world'
      description: Allow to scope results based on a value.
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        example: name | -name
        behavior: Read/Write
      description: The order in which resources are to be returning. Adding a ´-´ sort resourcesin the descending order.
